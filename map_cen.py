# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MapCEN
                                 A QGIS plugin
 Mise en page automatique (ajout de la légende, d'une barre d'échelle, de la flèche du nord, d'un titre) d'un projet QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Romain Montillet
        email                : r.montillet@cen-na.org
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QSize, QThread
from qgis.PyQt.QtGui import QFont, QIcon, QMovie, QColor, QPixmap
from qgis.PyQt.QtWidgets import QWidget, QAction, QMessageBox, QLabel, QPushButton, QFileDialog, QDialog, QVBoxLayout, QListWidget, QProgressDialog, QProgressBar
from qgis.utils import iface
from qgis.gui import QgsMapToolPan

from qgis.core import (
    Qgis, QgsApplication, QgsRasterLayer, QgsVectorLayer,
    QgsProject, QgsFeatureRequest, QgsCoordinateReferenceSystem, QgsSymbol, 
    QgsRuleBasedRenderer, QgsLayoutItemPicture, QgsLayoutItemLabel, 
    QgsLayerTree, QgsLayoutItemLegend, QgsCoordinateTransform,
    QgsUnitTypes, QgsLayoutSize, QgsLayoutPoint, QgsPrintLayout,
    QgsGeometryGeneratorSymbolLayer, QgsWkbTypes, QgsSimpleFillSymbolLayer, QgsLayoutItemMap,
    QgsLayoutItemScaleBar, QgsAggregateCalculator, QgsReadWriteContext,
    QgsLayoutItemPage, QgsLayerTreeGroup, QgsLegendStyle, QgsDataSourceUri, QgsLayoutExporter
)

from qgis.PyQt.QtXml import QDomDocument
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .map_cen_dialog import MapCENDialog
import os.path
import urllib
from urllib import request, parse
import glob
import socket
import yaml

from datetime import date

# Import le gestionnaire de modules
from .modules.module_manager import ModuleManager


# Vérifier la connexion à internet
try:
    # Vérifier si l'utilisateur est connecté à internet en ouvrant une connexion avec un site web
    host = socket.gethostbyname("www.google.com")
    s = socket.create_connection((host, 80), 2)
    s.close()
except socket.error:
    # Afficher un message si l'utilisateur n'est pas connecté à internet
    QMessageBox.warning(None, 'Avertissement',
                        'Vous n\'êtes actuellement pas connecté à internet. Veuillez vous connecter pour pouvoir utiliser MapCEN !')


class OptionsWindow(QWidget):
    def __init__(self, parent=None):
        super(OptionsWindow, self).__init__(parent)

        self.setWindowTitle("Options d'export")
        self.setMinimumSize(300,200)
        self.setMaximumSize(300,200)

        titre = QLabel(self)
        titre.setFont(QFont("Calibri",weight=QFont.Bold))
        titre.move(70, 20)
        titre.setText("Résolution de la carte à exporter :")
        a = QPushButton("Haute résolution", self)
        a.move(90, 50)
        a.setMinimumSize(120, 25)
        a.setMaximumSize(120, 25)
        b = QPushButton("Moyenne résolution", self)
        b.move(90, 90)
        b.setMinimumSize(120, 25)
        b.setMaximumSize(120, 25)
        c = QPushButton("Basse résolution", self)
        c.move(90, 130)
        c.setMinimumSize(120, 25)
        c.setMaximumSize(120, 25)

        a.clicked.connect(lambda: self.set_resolution(300))
        b.clicked.connect(lambda: self.set_resolution(200))
        c.clicked.connect(lambda: self.set_resolution(100))

        self.dlg = MapCENDialog()

    def set_resolution(self, resolution):
        # Récupérer l'instance du plugin MapCEN
        from qgis.utils import plugins
        map_cen_instance = plugins['map_cen']
        
        # Définir la résolution
        map_cen_instance.resolution = resolution
        
        # Fermer la fenêtre d'options
        self.close()


class AuthSelectionDialog(QDialog):
    def __init__(self, auth_configs, parent=None):
        super(AuthSelectionDialog, self).__init__(parent)
        self.selected_auth_id = None
        
        self.setWindowTitle("Sélection de configuration d'authentification")
        self.setMinimumSize(400, 300)
        
        layout = QVBoxLayout()
        
        # Label d'instructions
        label = QLabel("Sélectionnez une configuration d'authentification pour accéder aux données protégées:")
        layout.addWidget(label)
        
        # Liste des configurations d'authentification
        self.auth_list = QListWidget()
        for auth_id, auth_config in auth_configs.items():
            auth_name = auth_config.name()
            self.auth_list.addItem(f"{auth_name} ({auth_id})")
        layout.addWidget(self.auth_list)
        
        # Bouton OK
        ok_button = QPushButton("OK")
        ok_button.clicked.connect(self.accept_selection)
        layout.addWidget(ok_button)
        
        self.setLayout(layout)
    
    def accept_selection(self):
        selected_items = self.auth_list.selectedItems()
        if selected_items:
            # Extraire l'ID d'authentification entre parenthèses
            selected_text = selected_items[0].text()
            start_pos = selected_text.rfind('(') + 1
            end_pos = selected_text.rfind(')')
            self.selected_auth_id = selected_text[start_pos:end_pos]
            self.accept()
        else:
            QMessageBox.warning(self, "Avertissement", "Veuillez sélectionner une configuration d'authentification.")


class MapCEN:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MapCEN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MapCEN')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        
        # Initialiser les attributs du plugin
        self.dlg = None
        self.resolution = 200  # Résolution par défaut
        self.template_parameters = {}
        self.layout = None
        self.my_map1 = None
        self.echelle = None
        self.scalebar = None
        self.selected_auth_id = None
        
        # Créer le gestionnaire de modules
        self.module_manager = ModuleManager(self)

    def closeEvent(self, event):
        # Cette méthode est appelée lorsque la fenêtre principale est fermée
        # Nettoyer les ressources
        self.module_manager.cleanup()
        event.accept()

    def show_welcome_popup(self):
        """
        Affiche une fenêtre avec une image au démarrage, centre l'image et ajoute un texte en dessous.
        """
        # Créer une fenêtre de dialogue
        welcome_dialog = QDialog(self.iface.mainWindow())
        welcome_dialog.setWindowTitle("Bienvenue dans MapCEN")
        welcome_dialog.setFixedSize(500, 400)
        
        # Créer un layout vertical
        layout = QVBoxLayout(welcome_dialog)
        
        # Ajouter une image
        label_image = QLabel()
        pixmap = QPixmap(os.path.join(self.plugin_dir, "background_plugin.PNG"))
        
        # Redimensionner l'image si nécessaire
        scaled_width = 480
        scaled_height = 270
        scaled_pixmap = pixmap.scaled(scaled_width, scaled_height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        
        label_image.setPixmap(scaled_pixmap)
        label_image.setAlignment(Qt.AlignCenter)
        layout.addWidget(label_image)
        
        # Ajouter un texte de bienvenue
        welcome_text = QLabel("Bienvenue dans MapCEN, votre outil de cartographie automatique pour les sites du Conservatoire d'Espaces Naturels de Nouvelle-Aquitaine.")
        welcome_text.setWordWrap(True)
        welcome_text.setAlignment(Qt.AlignCenter)
        welcome_text.setFont(QFont("Arial", 10))
        layout.addWidget(welcome_text)
        
        # Ajouter un texte d'information sur la version
        version_text = QLabel("Version: 1.0.0")
        version_text.setAlignment(Qt.AlignCenter)
        layout.addWidget(version_text)
        
        # Ajouter un bouton pour fermer la fenêtre
        close_button = QPushButton("Commencer")
        close_button.clicked.connect(welcome_dialog.accept)
        layout.addWidget(close_button)
        
        # Afficher la fenêtre
        welcome_dialog.exec_()


    def is_first_run_of_new_version(self):
        """
        Vérifie si c'est la première fois que cette version du plugin est démarrée en utilisant la version
        du plugin stockée dans 'metadata.txt' et la dernière version disponible en ligne.
        """
        # Lire la version actuelle du plugin depuis metadata.txt
        metadata_path = os.path.join(self.plugin_dir, 'metadata.txt')
        current_version = None
        
        if os.path.exists(metadata_path):
            with open(metadata_path, 'r') as f:
                for line in f:
                    if line.startswith('version='):
                        current_version = line.strip().split('=')[1]
                        break
        
        if not current_version:
            return True  # Si on ne peut pas déterminer la version, on considère que c'est un premier démarrage
        
        # Vérifier la dernière version utilisée dans les paramètres QSettings
        settings = QSettings()
        last_used_version = settings.value("MapCEN/last_used_version", "")
        
        # Si la version actuelle est différente de la dernière version utilisée, c'est un premier démarrage de cette version
        is_first_run = current_version != last_used_version
        
        # Enregistrer la version actuelle comme dernière version utilisée
        settings.setValue("MapCEN/last_used_version", current_version)
        
        return is_first_run


    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MapCEN', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/map_cen/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MapCEN'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
        # Vérifier les configurations d'authentification
        self.check_authentication_configs()


    def check_authentication_configs(self):
        """
        Vérifie le nombre de configurations d'authentification disponibles et affiche un message si nécessaire.
        """
        auth_manager = QgsApplication.authManager()
        auth_configs = []
        
        # Récupérer toutes les configurations d'authentification
        for auth_id in auth_manager.availableAuthMethodConfigs().keys():
            # Dans les versions récentes de QGIS, on utilise directement l'ID comme identifiant
            auth_name = auth_id  # Utiliser l'ID comme nom par défaut
            auth_configs.append((auth_id, auth_name))
        
        # Si aucune configuration n'est disponible, afficher un message
        if not auth_configs:
            QMessageBox.warning(None, "Avertissement", 
                               "Aucune configuration d'authentification n'est disponible. "
                               "Certaines fonctionnalités du plugin peuvent ne pas fonctionner correctement.")


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MapCEN'),
                action)
            self.iface.removeToolBarIcon(action)


    def function_from_plugin(self, event):
        pass


    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MapCENDialog()
            
            # Configurer le gestionnaire de modules
            self.module_manager.setup(self.dlg)
            
            # Connecter le bouton d'options de résolution
            self.dlg.commandLinkButton_6.clicked.connect(self.popup_resolution)
            
            # Connecter le bouton de configuration d'authentification par défaut
            self.dlg.commandLinkButton_3.clicked.connect(self.choose_default_authentication)
            
            # Afficher la fenêtre de bienvenue si c'est le premier démarrage d'une nouvelle version
            if self.is_first_run_of_new_version():
                self.show_welcome_popup()
        
        # Initialiser le plugin
        self.initialisation()
        
        # show the dialog
        self.dlg.show()


    def apply_authentication_if_needed(self, uri):
        """
        Applique une configuration d'authentification si nécessaire.
        Charge automatiquement la configuration par défaut si elle est enregistrée dans QSettings.
        
        Args:
            uri (QgsDataSourceUri): L'URI à laquelle appliquer l'authentification
            
        Returns:
            bool: True si l'authentification a été appliquée avec succès, False sinon
        """
        settings = QSettings()
        default_auth_id = settings.value("MapCEN/default_auth_id", None)

        # Si une configuration par défaut existe, on l'applique automatiquement
        if default_auth_id:
            uri.setAuthConfigId(default_auth_id)
            return True

        # Si aucune configuration par défaut n'est définie, ouvrir la boîte de dialogue
        managerAU = QgsApplication.authManager()
        auth_configs = managerAU.availableAuthMethodConfigs()  # Récupérer toutes les configurations disponibles

        if len(auth_configs) == 1:
            # Si une seule configuration est disponible, on l'applique directement
            auth_id = list(auth_configs.keys())[0]
            uri.setAuthConfigId(auth_id)
            return True
        elif len(auth_configs) > 1:
            # Si plusieurs configurations sont disponibles, on invite l'utilisateur à en choisir une
            dialog = AuthSelectionDialog(auth_configs, self.dlg)
            result = dialog.exec_()
            if result == QDialog.Accepted and dialog.selected_auth_id:
                uri.setAuthConfigId(dialog.selected_auth_id)
                return True
        else:
            QMessageBox.warning(self.dlg, "Attention", "Aucune configuration d'authentification n'a été trouvée dans votre QGIS. Veuillez ajouter la configuration d'authentification CEN-NA pour charger des couches nécessitant une authentification telles que la MFU.")
            return False
        
        return False


    def popup_resolution(self):
        """
        Affiche une fenêtre de dialogue pour choisir la résolution d'export
        """
        dialog = OptionsWindow()
        dialog.show()
    
    def choose_default_authentication(self):
        """
        Permet à l'utilisateur de choisir une configuration d'authentification par défaut
        qui sera utilisée automatiquement pour toutes les connexions futures
        """
        # Récupérer les configurations d'authentification disponibles
        managerAU = QgsApplication.authManager()
        auth_configs = managerAU.availableAuthMethodConfigs()
        
        if not auth_configs:
            QMessageBox.warning(self.dlg, "Attention", 
                              "Aucune configuration d'authentification n'a été trouvée dans votre QGIS. "
                              "Veuillez d'abord ajouter une configuration d'authentification.")
            return
        
        # Ouvrir la boîte de dialogue de sélection
        dialog = AuthSelectionDialog(auth_configs, self.dlg)
        result = dialog.exec_()
        
        if result == QDialog.Accepted and dialog.selected_auth_id:
            # Enregistrer l'ID d'authentification sélectionné dans les paramètres
            settings = QSettings()
            settings.setValue("MapCEN/default_auth_id", dialog.selected_auth_id)
            
            QMessageBox.information(self.dlg, "Configuration enregistrée", 
                                  f"La configuration d'authentification par défaut a été définie. "
                                  f"ID: {dialog.selected_auth_id}")
    
    def initialisation(self):
        """
        Initialise le plugin en chargeant les couches nécessaires et en configurant l'interface utilisateur
        """
        # Créer une boîte de dialogue de progression
        progress_dialog = QProgressDialog("Initialisation du plugin MapCEN...", "Annuler", 0, 10, self.dlg)
        progress_dialog.setWindowTitle("Initialisation")
        progress_dialog.setWindowModality(Qt.WindowModal)
        progress_dialog.setValue(1)
        
        # Étape 1 : Définir l'état initial des boutons radio
        self.dlg.radioButton.setChecked(True)
        self.dlg.radioButton.setEnabled(True)
        self.dlg.radioButton_2.setEnabled(True)
        self.dlg.radioButton_3.setEnabled(True)
        
        progress_dialog.setValue(2)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return  # Sortir si l'utilisateur annule

        # Étape 2 : Initialisation du module en fonction de la sélection dans comboBox_3
        # Cette étape est maintenant gérée par le gestionnaire de modules
        self.module_manager.on_module_selection_changed(self.dlg.comboBox_3.currentText())

        progress_dialog.setValue(3)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 3 : Configurer l'URI et appliquer l'authentification
        print("[DEBUG] Étape 3: Configuration de l'URI pour Sites gérés CEN-NA")
        uri = QgsDataSourceUri()
        uri.setParam("url", "https://opendata.cen-nouvelle-aquitaine.org/geoserver/fonciercen/wfs")
        uri.setParam("typename", "fonciercen:site_gere_point")
        print(f"[DEBUG] URI pour Sites gérés CEN-NA: {uri.uri()}")
        if not self.apply_authentication_if_needed(uri):
            print("[DEBUG] Échec de l'authentification pour Sites gérés CEN-NA")
            progress_dialog.close()
            return  # Sortir si l'authentification échoue

        # Étape 4 : Charger la couche protégée
        print("[DEBUG] Étape 4: Chargement de la couche Sites gérés CEN-NA")
        self.sites_gere_centroid_layer = QgsVectorLayer(uri.uri(), "Sites gérés CEN-NA", "WFS")
        if not self.sites_gere_centroid_layer.isValid():
            print("[DEBUG] La couche Sites gérés CEN-NA n'est pas valide")
            QMessageBox.warning(self.dlg, "Erreur de chargement", "Impossible de charger la couche 'Sites gérés CEN-NA'.")
            progress_dialog.close()
            return
        else:
            print("[DEBUG] La couche Sites gérés CEN-NA a été chargée avec succès")
            QgsProject.instance().addMapLayer(self.sites_gere_centroid_layer)

        progress_dialog.setValue(4)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 5 : Charger la couche des parcelles
        print("[DEBUG] Étape 5: Configuration de l'URI pour Parcelles CEN NA en MFU")
        uri2 = QgsDataSourceUri()
        uri2.setParam("url", "https://opendata.cen-nouvelle-aquitaine.org/geoserver/fonciercen/wfs")
        uri2.setParam("typename", "fonciercen:mfu_cenna")
        print(f"[DEBUG] URI pour Parcelles CEN NA en MFU: {uri2.uri()}")
        if not self.apply_authentication_if_needed(uri2):
            print("[DEBUG] Échec de l'authentification pour Parcelles CEN NA en MFU")
            progress_dialog.close()
            return

        print("[DEBUG] Chargement de la couche Parcelles CEN NA en MFU")
        self.parcelles_layer = QgsVectorLayer(uri2.uri(), "Parcelles CEN NA en MFU", "WFS")
        if not self.parcelles_layer.isValid():
            print("[DEBUG] La couche Parcelles CEN NA en MFU n'est pas valide")
            QMessageBox.warning(self.dlg, "Erreur de chargement", "Impossible de charger la couche 'Parcelles CEN NA en MFU'.")
            progress_dialog.close()
            return
        else:
            print("[DEBUG] La couche Parcelles CEN NA en MFU a été chargée avec succès")
            QgsProject.instance().addMapLayer(self.parcelles_layer)

        progress_dialog.setValue(5)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 6 : Charger la couche des départements
        # Chargement ou récupération de la couche 'Département'
        depts_existe = QgsProject.instance().mapLayersByName("Département")

        if depts_existe:
            self.depts_NA = depts_existe[0]
            iface.messageBar().pushMessage("Couche 'Département'", "La couche 'Département' est déjà chargée dans le canevas QGIS.", level=Qgis.Success, duration=5)
        else:
            self.depts_NA = iface.addVectorLayer(
                "https://opendata.cen-nouvelle-aquitaine.org/administratif/wfs?VERSION=1.0.0&TYPENAME=administratif:departement&SRSNAME=EPSG:4326&request=GetFeature",
                "Département", "WFS")
            if not self.depts_NA or not self.depts_NA.isValid():
                QMessageBox.critical(iface.mainWindow(), "Erreur de chargement", "Impossible de charger la couche 'Département'. Veuillez contacter le pôle DSI !", QMessageBox.Ok)
                return

        progress_dialog.setValue(6)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 7 : Remplir la liste des sites
        self.dlg.mComboBox.clear()
        site_names = []
        for feature in self.sites_gere_centroid_layer.getFeatures():
            site_name = feature['nom_site']
            if site_name and site_name not in site_names:
                site_names.append(site_name)
        
        site_names.sort()
        self.dlg.mComboBox.addItems(site_names)

        progress_dialog.setValue(7)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 8 : Remplir la liste des départements
        self.dlg.mComboBox_4.clear()
        dept_names = []
        for feature in self.depts_NA.getFeatures():
            dept_code = feature['insee_dep']
            dept_name = feature['nom_dep']
            if dept_code and dept_name:
                dept_names.append(f"{dept_code} - {dept_name}")
        
        dept_names.sort()
        self.dlg.mComboBox_4.addItems(dept_names)

        progress_dialog.setValue(8)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 9 : Configurer les autres éléments de l'interface
        self.dlg.comboBox_3.clear()
        self.dlg.comboBox_3.addItems(["Localisation générale", "Périmètres écologiques", "Travaux"])

        progress_dialog.setValue(9)
        if progress_dialog.wasCanceled():
            progress_dialog.close()
            return

        # Étape 10 : Finalisation
        progress_dialog.setValue(10)
        progress_dialog.close()


# Créer une instance globale du plugin
map_cen_instance = MapCEN(iface)
